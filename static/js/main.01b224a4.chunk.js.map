{"version":3,"sources":["components/Section/Section.module.css","components/Form/Form.module.css","components/Contacts/Contacts.module.css","components/Section/Section.js","components/Form/Form.js","components/Filter/Filter.js","components/Contacts/ContactsItem.js","components/Contacts/Contacts.js","App.js","index.js"],"names":["module","exports","Section","title","children","className","s","section","Form","onSubmit","useState","number","setNumber","name","setName","reset","handleChange","e","target","value","form","preventDefault","htmlFor","type","id","onChange","pattern","required","Filter","ContactsItem","deleteFunc","onClick","Contacts","contacts","deleteHandler","list","length","map","App","JSON","parse","window","localStorage","getItem","setContacts","filter","setFilter","contact","nanoid","findContact","find","alert","prevState","currentTarget","normalizedFilter","toLowerCase","includes","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.01b224a4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__Ap5Zy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__2TM1N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Contacts_list__tcvns\"};","import PropTypes from \"prop-types\";\nimport s from \"../Section/Section.module.css\";\nconst Section = ({ title, children }) => (\n  <section className={s.section}>\n    <h2>{title}</h2>\n    {children}\n  </section>\n);\n\nSection.propTypes = {\n  title: PropTypes.string,\n  cildren: PropTypes.any,\n};\nexport { Section };\n","import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Section } from \"../Section/Section\";\nimport s from \"../Form/Form.module.css\";\n\n\nexport default function Form({ onSubmit }) {\n  const [number, setNumber] = useState(\"\")\n  const [name, setName] = useState(\"\")\n\n  const handleSubmit = e => {\n    e.preventDefault()\n    onSubmit(name, number);\n    reset();\n  }\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleChange = e => {\n    const { name, value } = e.target\n\n    switch (name) {\n      case 'name':\n        setName(value)\n        break;\n      case 'number':\n        setNumber(value)\n        break;\n      default:\n        return\n    }\n  }\n\n  // const handleNumChange = e => {\n  //   setNumber(e.target.value)\n  // }\n\n  // const handleNameChange = e => {\n  //   setName(e.target.value)\n  // };\n\n  return (\n    <Section title=\"Phonebook\">\n      <form\n        className={s.form}\n        onSubmit={handleSubmit}\n      >\n        <label htmlFor=\"input-name\">Name</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          id=\"input-name\"\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n        <label htmlFor=\"input-number\">Number</label>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          id=\"input-number\"\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n        <button type=\"submit\">Add contact</button>\n      </form>\n    </Section>\n  );\n}\n\n// class Form extends Component {\n\n//   state = {\n//     name: \"\",\n//     number: \"\",\n//   };\n\n//   handleChange = ({ target }) => {\n//     const { name, value } = target;\n//     this.setState({ [name]: value });\n//     //console.log(this.state)\n//   };\n//   handleSubmit = (e) => {\n//     e.preventDefault();\n//     this.props.onSubmit(this.state);\n//     this.reset();\n//     //console.log(this.state)\n//   };\n\n//   reset = () => {\n//     this.setState({ name: \"\", number: \"\" });\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n//     return (\n//       <Section title=\"Phonebook\">\n//         <form className={s.form} onSubmit={this.handleSubmit}>\n//           <label htmlFor=\"input-name\">Name</label>\n//           <input\n//             type=\"text\"\n//             name=\"name\"\n//             value={name}\n//             id=\"input-name\"\n//             onChange={this.handleChange}\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//             required\n//           />\n//           <label htmlFor=\"input-number\">Number</label>\n//           <input\n//             type=\"tel\"\n//             name=\"number\"\n//             value={number}\n//             id=\"input-number\"\n//             onChange={this.handleChange}\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//             required\n//           />\n//           <button type=\"submit\">Add contact</button>\n//         </form>\n//       </Section>\n//     );\n//   }\n// }\n\nForm.propTypes = {\n  onSubmit: PropTypes.func,\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\n\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Section } from \"../Section/Section\";\nconst Filter = ({ value, onChange }) => (\n  <Section>\n    <label htmlFor=\"search\">\n      <h2>Find your contact by name</h2>\n\n      <input id=\"search\" type=\"text\" value={value} onChange={onChange}></input>\n    </label>\n  </Section>\n);\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nexport { Filter };\n","import React from \"react\";\n\nimport PropTypes from \"prop-types\";\nconst ContactsItem = ({ id, name, number, deleteFunc }) => (\n  <li key={id}>\n    <p>\n      {name}:{number}\n    </p>\n    <button type=\"button\" onClick={deleteFunc}>\n      Delete\n    </button>\n  </li>\n);\nContactsItem.propTypes = {\n  id: PropTypes.number,\n  name: PropTypes.string,\n  number: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  deleteFunc: PropTypes.func.isRequired,\n};\nexport { ContactsItem };\n","import React from \"react\";\nimport { Section } from \"../Section/Section\";\nimport { ContactsItem } from \"./ContactsItem\";\nimport s from \"./Contacts.module.css\";\n\nimport PropTypes from \"prop-types\";\nconst Contacts = ({ contacts, deleteHandler }) => (\n  <Section title=\"Contacts\">\n    <ul className={s.list}>\n      {contacts.length === 0 ? (\n        <h3>Please add contact</h3>\n      ) : (\n          contacts.map(({ name, id, number }) => (\n            <ContactsItem\n              deleteFunc={() => deleteHandler(id)}\n              name={name}\n              key={id}\n              number={number}\n            />\n          ))\n        )}\n    </ul>\n  </Section>\n);\nContacts.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  deleteHandler: PropTypes.func.isRequired,\n  name: PropTypes.string,\n  id: PropTypes.string,\n  number: PropTypes.string,\n};\nexport { Contacts };\n","import { useState } from \"react\";\n\nimport \"./App.css\";\n\nimport Form from \"./components/Form/Form\";\n//import { Filter } from 'components/Filter/Filter';\nimport { Filter } from \"./components/Filter/Filter\";\nimport { Contacts } from \"./components/Contacts/Contacts\";\nimport { nanoid } from \"nanoid\";\n\nexport default function App() {\n  const [contacts, setContacts] = useState(() => {\n    return JSON.parse(window.localStorage.getItem('contacts')) ?? [];\n  });\n  const [filter, setFilter] = useState('');\n\n  const formSubmitHandler = (name, number) => {\n    const contact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n    const findContact = contacts.find(\n      (contact) => contact.name === name\n    );\n\n    findContact\n      ? alert(`${name} is already in contacts!`)\n      : setContacts(prevState => [contact, ...prevState])\n  }\n  const onFilterChange = (e) => {\n    setFilter(e.currentTarget.value);\n  };\n\n  const newContacts = () => {\n\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const deleteContact = (contactId) => {\n    setContacts(prevState => ({\n      contacts: prevState.contacts.filter(\n        (contact) => contact.id !== contactId\n      ),\n    }));\n  };\n\n  return (\n    <div className=\"App\">\n      <Form onSubmit={formSubmitHandler} />\n      <Filter value={filter} onChange={onFilterChange} />\n      <Contacts contacts={newContacts} deleteHandler={deleteContact} />\n    </div>\n  );\n}\n\n// class App extends Component {\n//   state = {\n//     contacts: [\n//       // { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n//       // { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n//       // { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n//       // { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n//     ],\n//     filter: \"\",\n//     name: \"\",\n//     number: \"\",\n//   };\n\n//   formSubmitHandler = ({ name, number }) => {\n//     const contact = {\n//       id: nanoid(),\n//       name,\n//       number,\n//     };\n//     const findContact = this.state.contacts.find(\n//       (contact) => contact.name === name\n//     );\n\n//     findContact\n//       ? alert(`${name} is already in contacts!`)\n//       : this.setState((prevState) => ({\n//         contacts: [...prevState.contacts, contact],\n//       }));\n//   };\n\n//   deleteContact = (contactId) => {\n//     this.setState((prevState) => ({\n//       contacts: prevState.contacts.filter(\n//         (contact) => contact.id !== contactId\n//       ),\n//     }));\n//   };\n//   onFilterChange = (e) => {\n//     this.setState({ filter: e.currentTarget.value });\n//   };\n\n//   getContacts = () => {\n//     const { filter, contacts } = this.state;\n//     const normalizedFilter = filter.toLowerCase();\n//     return contacts.filter((contact) =>\n//       contact.name.toLowerCase().includes(normalizedFilter)\n//     );\n//   };\n//   componentDidMount() {\n//     const myContacts = localStorage.getItem(\"contacts\");\n\n//     const parseContacts = JSON.parse(myContacts);\n//     //console.log(this.state);\n//     if (parseContacts) {\n//       this.setState({ contacts: parseContacts });\n//     }\n//   }\n//   componentDidUpdate(prevProps, prevState) {\n//     if (this.state.contacts !== prevState.contacts) {\n//       console.log(\"Updated!)\");\n//       localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n//     }\n//   }\n//   render() {\n//     const newContacts = this.getContacts();\n//     const deleteContact = this.deleteContact;\n//     const onFilterChange = this.onFilterChange;\n//     return (\n//       <div className=\"App\">\n//         <Form onSubmit={this.formSubmitHandler} />\n//         <Filter value={this.state.filter} onChange={onFilterChange} />\n//         <Contacts contacts={newContacts} deleteHandler={deleteContact} />\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n//import reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}